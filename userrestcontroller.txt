	@RequestMapping(value = "/jumboAPICall/{prjName}/{testName}/{boolBatch}/{batchName}", method = RequestMethod.GET, produces = "application/pdf")
	public ServletOutputStream restfulRunTest(@PathVariable String prjName, @PathVariable String testName, @PathVariable String boolBatch, @PathVariable String batchName, HttpServletResponse PDFHttpresponse) throws Exception{
		ServletOutputStream servletOutputStream= null;
		if(prjName != null && testName != null && batchName != null && boolBatch != null) {
			
			if(boolBatch.equals("yes")) {
				System.out.println("proj name and test name"+prjName+" "+batchName);
				BatchDetailsTO batchData = jdbcTemplateJobStatusDao.fetchBatchDetails(batchName, prjName);
				Map<String, String> requestBatch = new HashMap<String, String>();
				
				String batchDataCommaDele = batchData.getTestName().replace("##", ",");
				requestBatch.put("projectName", prjName);
				requestBatch.put("batname", batchName);
				requestBatch.put("batchFiles", batchDataCommaDele);
				requestBatch.put("userName", batchData.getUserName());
				
				runBatch(requestBatch);
				
				return null;
			}else {
				if(batchName.equalsIgnoreCase("parallelRun")) {
					
					String testname[] = testName.split(",");
					
					for(int i = 0 ; i < testname.length ;i++) {
						Map<String,String> requestGetLastTestID = new HashMap<String,String>();
						requestGetLastTestID.put("prjName", prjName);
						requestGetLastTestID.put("testName", testname[i]);
						ResponseEntity<String> response = getLatestTestId(requestGetLastTestID);
						String responseBodyStr = response.getBody();
						JSONObject responseObj = new JSONObject(responseBodyStr);
						String responseStr = (String) responseObj.get("latestTestDetails");
						String testDetails[] = responseStr.split("##");
						
						
						String testDate = testDetails[2]+" "+testDetails[3];
						String testTime = testDetails[4]+" "+testDetails[5];
						
						Map<String,String> requestNewRun = new HashMap<String,String>();
						requestNewRun.put("projectName", prjName);
						requestNewRun.put("testName", testDetails[1]);
						requestNewRun.put("testDate", testDate);
						requestNewRun.put("testTime", testTime);
						requestNewRun.put("newsrc", "");
						requestNewRun.put("newtgt", "");
						requestNewRun.put("userName", testDetails[6]);
						requestNewRun.put("ssotoken", null);
						
						ResponseEntity<String> responseNewRun = reRun(requestNewRun);
						String responseNewRunBodyStr = responseNewRun.getBody();
						JSONObject responseNewRunObj = new JSONObject(responseNewRunBodyStr);
						String responseNewRunStrTestID = (String) responseNewRunObj.get("message");
						
						pdfExport.pdfgenerate(prjName, responseNewRunStrTestID, "", sc, spark);
						File file = new File(res_path + "jumbo_log/" + prjName + "/Result/" + responseNewRunStrTestID + ".pdf");
						
							if (file.exists()) {
								 System.out.println("*******************************File exists");
								 String filename = prjName+"_"+testName+"_"+responseNewRunStrTestID+".pdf";
								 Path file1 = Paths.get(res_path + "jumbo_log/" + prjName + "/Result/", responseNewRunStrTestID+".pdf");
								 
								 PDFHttpresponse.setContentType("application/pdf");
								 PDFHttpresponse.addHeader("Content-Disposition", "attachment; filename="+filename);
					             try{
					                Files.copy(file1, PDFHttpresponse.getOutputStream());
					                servletOutputStream = PDFHttpresponse.getOutputStream();
					             }catch (IOException ex) {
					                ex.printStackTrace();
					             }
					             
					             return servletOutputStream;
							}
					}
					
				}else {


					Map<String,String> requestGetLastTestID = new HashMap<String,String>();
					requestGetLastTestID.put("prjName", prjName);
					requestGetLastTestID.put("testName", testName);
					ResponseEntity<String> response = getLatestTestId(requestGetLastTestID);
					String responseBodyStr = response.getBody();
					JSONObject responseObj = new JSONObject(responseBodyStr);
					String responseStr = (String) responseObj.get("latestTestDetails");
					String testDetails[] = responseStr.split("##");
					
					
					String testDate = testDetails[2]+" "+testDetails[3];
					String testTime = testDetails[4]+" "+testDetails[5];
					
					Map<String,String> requestNewRun = new HashMap<String,String>();
					requestNewRun.put("projectName", prjName);
					requestNewRun.put("testName", testDetails[1]);
					requestNewRun.put("testDate", testDate);
					requestNewRun.put("testTime", testTime);
					requestNewRun.put("newsrc", "");
					requestNewRun.put("newtgt", "");
					requestNewRun.put("userName", testDetails[6]);
					requestNewRun.put("ssotoken", null);
					
					ResponseEntity<String> responseNewRun = reRun(requestNewRun);
					String responseNewRunBodyStr = responseNewRun.getBody();
					JSONObject responseNewRunObj = new JSONObject(responseNewRunBodyStr);
					String responseNewRunStrTestID = (String) responseNewRunObj.get("message");
					
					pdfExport.pdfgenerate(prjName, responseNewRunStrTestID, "", sc, spark);
					File file = new File(res_path + "jumbo_log/" + prjName + "/Result/" + responseNewRunStrTestID + ".pdf");
					
						if (file.exists()) {
							
							 File fileTestId = new File(res_path + "jumbo_log/" + prjName  + "/testID_temp.txt");
							 BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(fileTestId, true));
							 System.out.println("inner val test id --> "+responseNewRunStrTestID);
							 bufferedWriter.write(responseNewRunStrTestID);
							 bufferedWriter.close();
							
							 System.out.println("*******************************File exists");
							 String filename = prjName+"_"+testName+"_"+responseNewRunStrTestID+".pdf";
							 Path file1 = Paths.get(res_path + "jumbo_log/" + prjName + "/Result/", responseNewRunStrTestID+".pdf");
							 
							 PDFHttpresponse.setContentType("application/pdf");
							 PDFHttpresponse.addHeader("Content-Disposition", "attachment; filename="+filename);
				             try{
				                Files.copy(file1, PDFHttpresponse.getOutputStream());
				                servletOutputStream = PDFHttpresponse.getOutputStream();
				             }catch (IOException ex) {
				                ex.printStackTrace();
				             }
				             
				             return servletOutputStream;
						}
		        }
			}
		}else {
			return null;
		}
		return servletOutputStream;
	}